{"version":3,"sources":["App.js","index.js"],"names":["MondrianCanvas","props","useState","svg","setSvg","canvasRef","useRef","useEffect","canvas","current","context","C2S","window","innerWidth","size","dpr","devicePixelRatio","width","height","lineWidth","step","colors","squares","x","y","splitSquaresWith","coordinates","i","length","square","Math","random","splice","splitOnX","splitOnY","splitAt","squareA","squareB","push","floor","color","beginPath","rect","fillStyle","fill","stroke","draw","mySvg","getSvg","setAttribute","ref","id","baseVal","value","viewBox","dangerouslySetInnerHTML","__html","innerHTML","App","className","ReactDOM","render","StrictMode","templateProps","document","getElementById"],"mappings":"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","file":"static/js/main.6bc1bde4.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport C2S from 'canvas2svg'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MondrianCanvas />\n    </div>\n  );\n}\n\nconst MondrianCanvas = props => {\n  const [svg, setSvg] = useState(null)\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    var context = new C2S(window.innerWidth, window.innerWidth)\n\n    const size = window.innerWidth;\n    const dpr = window.devicePixelRatio;\n\n    canvas.width = size * dpr;\n    canvas.height = size * dpr;\n    context.lineWidth = 4;\n\n    const step = size / 7;\n    const white = '#F2F5F1';\n    const colors = ['#D40920', '#1356A2', '#F7D842']\n\n    const squares = [{\n        x: 0,\n        y: 0,\n        width: size,\n        height: size\n      }];\n\n    function splitSquaresWith(coordinates) {\n      const { x, y } = coordinates;\n\n      for (var i = squares.length - 1; i >= 0; i--) {\n      const square = squares[i];\n\n      if (x && x > square.x && x < square.x + square.width) {\n          if(Math.random() > 0.5) {\n            squares.splice(i, 1);\n            splitOnX(square, x);\n          }\n      }\n\n      if (y && y > square.y && y < square.y + square.height) {\n          if(Math.random() > 0.5) {\n            squares.splice(i, 1);\n            splitOnY(square, y);\n          }\n      }\n      }\n    }\n\n    function splitOnX(square, splitAt) {\n      var squareA = {\n        x: square.x,\n        y: square.y,\n        width: square.width - (square.width - splitAt + square.x),\n        height: square.height\n      };\n\n      var squareB = {\n      x: splitAt,\n      y: square.y,\n      width: square.width - splitAt + square.x,\n      height: square.height\n      };\n\n      squares.push(squareA);\n      squares.push(squareB);\n    }\n\n    function splitOnY(square, splitAt) {\n      var squareA = {\n        x: square.x,\n        y: square.y,\n        width: square.width,\n        height: square.height - (square.height - splitAt + square.y)\n      };\n\n      var squareB = {\n      x: square.x,\n      y: splitAt,\n      width: square.width,\n      height: square.height - splitAt + square.y\n      };\n\n      squares.push(squareA);\n      squares.push(squareB);\n    }\n\n    for (var i = 0; i < size; i += step) {\n      splitSquaresWith({ y: i });\n      splitSquaresWith({ x: i });\n    }\n\n    function draw() {\n      for (var i = 0; i < colors.length; i++) {\n        squares[Math.floor(Math.random() * squares.length)].color = colors[i];\n      }\n      for (var i = 0; i < squares.length; i++) {\n        context.beginPath();\n        context.rect(\n          squares[i].x,\n          squares[i].y,\n          squares[i].width,\n          squares[i].height\n        );\n        if(squares[i].color) {\n          context.fillStyle = squares[i].color;\n        } else {\n          context.fillStyle = white\n        }\n        context.fill()\n        context.stroke();\n      }\n    }\n\n    draw()\n\n    var mySvg = context.getSvg()\n    mySvg.setAttribute(\"viewBox\", `0 0 ${window.innerWidth} ${window.innerWidth}`)\n    setSvg(mySvg)\n\n  }, []) // useEffect\n\n  return (\n    <>\n      <canvas ref={canvasRef} {...props} />\n\n      <div\n        id=\"svg\"\n      >\n        <svg\n          width={svg && svg.width.baseVal.value}\n          height={svg && svg.height.baseVal.value}\n          viewBox={svg && `${svg.viewBox.baseVal.x} ${svg.viewBox.baseVal.y} ${svg.viewBox.baseVal.width} ${svg.viewBox.baseVal.height}`}\n          dangerouslySetInnerHTML={svg && { __html: svg.innerHTML }}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App {...window.templateProps} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}