[{"/Users/james/Documents/outfit/makecm/mondrian-mapping/src/App.js":"1","/Users/james/Documents/outfit/makecm/mondrian-mapping/src/index.js":"2"},{"size":2968,"mtime":1607385828397,"results":"3","hashOfConfig":"4"},{"size":245,"mtime":1607386246001,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"12m2z0f",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/james/Documents/outfit/makecm/mondrian-mapping/src/App.js",["11"],"import React, { useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MondrianCanvas />\n    </div>\n  );\n}\n\nconst MondrianCanvas = props => {\n  const canvasRef = useRef(null);\n\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const size = window.innerWidth;\n    const dpr = window.devicePixelRatio;\n\n    canvas.width = size * dpr;\n    canvas.height = size * dpr;\n    context.scale(dpr, dpr);\n    context.lineWidth = 8;\n\n    const step = size / 7;\n    const white = '#F2F5F1';\n    const colors = ['#D40920', '#1356A2', '#F7D842']\n\n    const squares = [{\n        x: 0,\n        y: 0,\n        width: size,\n        height: size\n      }];\n\n    function splitSquaresWith(coordinates) {\n      const { x, y } = coordinates;\n\n      for (var i = squares.length - 1; i >= 0; i--) {\n      const square = squares[i];\n\n      if (x && x > square.x && x < square.x + square.width) {\n          if(Math.random() > 0.5) {\n            squares.splice(i, 1);\n            splitOnX(square, x);\n          }\n      }\n\n      if (y && y > square.y && y < square.y + square.height) {\n          if(Math.random() > 0.5) {\n            squares.splice(i, 1);\n            splitOnY(square, y);\n          }\n      }\n      }\n    }\n\n    function splitOnX(square, splitAt) {\n      var squareA = {\n        x: square.x,\n        y: square.y,\n        width: square.width - (square.width - splitAt + square.x),\n        height: square.height\n      };\n\n      var squareB = {\n      x: splitAt,\n      y: square.y,\n      width: square.width - splitAt + square.x,\n      height: square.height\n      };\n\n      squares.push(squareA);\n      squares.push(squareB);\n    }\n\n    function splitOnY(square, splitAt) {\n      var squareA = {\n        x: square.x,\n        y: square.y,\n        width: square.width,\n        height: square.height - (square.height - splitAt + square.y)\n      };\n\n      var squareB = {\n      x: square.x,\n      y: splitAt,\n      width: square.width,\n      height: square.height - splitAt + square.y\n      };\n\n      squares.push(squareA);\n      squares.push(squareB);\n    }\n\n    for (var i = 0; i < size; i += step) {\n      splitSquaresWith({ y: i });\n      splitSquaresWith({ x: i });\n    }\n\n    function draw() {\n      for (var i = 0; i < colors.length; i++) {\n        squares[Math.floor(Math.random() * squares.length)].color = colors[i];\n      }\n      for (var i = 0; i < squares.length; i++) {\n        context.beginPath();\n        context.rect(\n          squares[i].x,\n          squares[i].y,\n          squares[i].width,\n          squares[i].height\n        );\n        if(squares[i].color) {\n          context.fillStyle = squares[i].color;\n        } else {\n          context.fillStyle = white\n        }\n        context.fill()\n        context.stroke();\n      }\n    }\n\n    draw()\n\n  }, []) // useEffect\n\n  return (\n    <canvas ref={canvasRef} {...props} />\n  )\n}\n\nexport default App;\n","/Users/james/Documents/outfit/makecm/mondrian-mapping/src/index.js",[],{"ruleId":"12","severity":1,"message":"13","line":108,"column":16,"nodeType":"14","messageId":"15","endLine":108,"endColumn":17},"no-redeclare","'i' is already defined.","Identifier","redeclared"]